{"version":3,"sources":["utils/Backtrack.ts","utils/Board.ts","components/Cell.tsx","components/Sudoku.tsx","components/App.tsx","reportWebVitals.js","index.js"],"names":["isDistinct","map","Set","values","size","isValid","board","row","col","block","findNextValue","cell","key","value","ind","parseInt","getIndex","newValue","set","print","noSolution","solutionFound","length","api","solve","emptyCells","empties","entries","nbrOfIteration","isFound","statistics","err","console","log","m","Map","getBlock","i","j","createKey","createEmpty","create","str","Error","Array","from","keys","forEach","Number","charAt","join","s","clear","filter","toString","get","Content","bg","className","replace","Cell","arr","getValue","startInd","slice","Sudoku","isSolving","PRESET","VALID_CHARS","App","useState","setBoard","setIsSolving","charsLeft","boardReady","onKeyDown","includes","tabIndex","onClick","e","target","dataset","preset","onPresetSelect","data-preset","nodeName","innerText","hidden","type","Board","setTimeout","res","Backtrack","onSolve","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.356c7054.chunk.js","sourcesContent":["export const isDistinct = (map: Map<string, number>): boolean => {\n  const s = new Set(map.values());\n  return s.size === map.size;\n};\n\nexport const getIndex = (\n  key: string\n): { row: number; col: number; block: number } => {\n  return {\n    row: parseInt(key[0], 10),\n    col: parseInt(key[1], 10),\n    block: parseInt(key[2], 10),\n  };\n};\n\nexport const isValid = (\n  { row, col, block }: { row: number; col: number; block: number },\n  board: Board\n) => {\n  return (\n    isDistinct(board.row(row)) &&\n    isDistinct(board.col(col)) &&\n    isDistinct(board.block(block))\n  );\n};\n\nexport const findNextValue = (\n  cell: [string, number],\n  board: Board\n): [boolean, number | null] => {\n  const [key, value] = cell;\n  const ind = getIndex(key);\n  let newValue = value;\n\n  do {\n    board.set(ind.row, ind.col, ++newValue);\n    board.print();\n  } while (newValue < 10 && !isValid(ind, board));\n\n  if (newValue === 10) {\n    board.set(ind.row, ind.col, 0);\n    return [false, null];\n  } else {\n    board.set(ind.row, ind.col, newValue);\n    return [true, newValue];\n  }\n};\n\nconst noSolution = (ind: number): boolean => ind < 0;\nconst solutionFound = (length: number, ind: number): boolean => ind === length;\n\n/**\n * \n * @param board A sudoku board, empty, complete or partially filled\n   The method uses backtrack algorithm to iterate through all the possible cell values (1-9). It returns with the first solution if there are multiple.\n   1. get the list of empty cells\n   2. get the next empty cell \n   3. find the next value for the cell and checks whether it is valid (check duplicates in row/col/block, <10)\n   - if yes ->  continue with next cell\n   - if no -> zero out cell and get back to previous cell\n   \n   Solution found if there is no empty cell left.\n   There is no solution if first empty cell value is 9 and it is not valid.\n   @returns [isSolutionFound: boolean, sudokuString:string]\n */\n\nconst solve = (board: Board): BacktrackResult => {\n  //const executionStart = window.performance.now();\n\n  // get empty cells\n  const emptyCells: [string, number][] = [...board.empties().entries()];\n\n  let ind: number = 0;\n  let nbrOfIteration = 0;\n\n  try {\n    do {\n      nbrOfIteration++;\n\n      // get next cell\n      let cell: [string, number] = emptyCells[ind];\n\n      // get next value for cell\n      const [isFound, value] = findNextValue(cell, board);\n\n      /*\n      console.log(\n        \"ITER: \" + nbrOfIteration,\n        \"IND: \" + ind,\n        cell[0] + \"->\" + value\n      );\n      */\n\n      if (isFound) {\n        // update current cell\n        cell[1] = value || 0;\n        // goto next empty cell\n        ind++;\n      } else {\n        // zero current cell\n        cell[1] = 0;\n        // get previous cell\n        ind--;\n      }\n    } while (!noSolution(ind) && !solutionFound(emptyCells.length, ind));\n\n    //const executionEnd = window.performance.now();\n    //const elapsedTime = `Execution time: ${executionEnd - executionStart} ms`;\n    const statistics = {\n      //elapsedTime,\n      nbrOfIteration,\n    };\n\n    if (noSolution(ind)) {\n      //console.log(\"No solution found. Nbr of iteration \" + nbrOfIteration);\n      return [false, \"\", statistics];\n    }\n\n    if (solutionFound(emptyCells.length, ind)) {\n      //console.log(\"Solution found: Nbr of iteration: \" + nbrOfIteration, board.print());\n      return [true, board.print(), statistics];\n    }\n\n    return [false, \"\", statistics];\n  } catch (err) {\n    console.log(\"Error\", err);\n    return [false, err, null];\n  }\n};\n\nconst api = {\n  solve,\n};\nexport default api;\n","// data structure will stored in a Map\n// keys: <row,col,block>    \"111\" to \"999\" (81 key)\n\nconst m: Map<string, number> = new Map();\n\nexport const getBlock = (i: number, j: number): number => {\n  if (j - 1 < 3) {\n    if (i - 1 < 3) return 1;\n    if (i - 1 < 6) return 4;\n    return 7;\n  } else if (j - 1 < 6) {\n    if (i - 1 < 3) return 2;\n    if (i - 1 < 6) return 5;\n    return 8;\n  } else {\n    if (i - 1 < 3) return 3;\n    if (i - 1 < 6) return 6;\n    return 9;\n  }\n};\n\nconst createKey = (row: number, col: number): string =>\n  `${row}${col}${getBlock(row, col)}`;\n\nconst createEmpty = (): void => {\n  for (let i = 1; i < 10; i++) {\n    for (let j = 1; j < 10; j++) {\n      m.set(createKey(i, j), 0);\n    }\n  }\n};\n\nconst create = (str: string): void => {\n  if (str.length !== 81) {\n    throw new Error(\"Invalid sudoku\");\n  }\n  createEmpty();\n\n  const keys = Array.from(m.keys());\n  keys.forEach((key, ind) => {\n    m.set(key, Number.parseInt(str.charAt(ind), 10));\n  });\n};\n\nconst log = () => {\n  let i = 1;\n  let s = \"\";\n  for (let value of m.values()) {\n    if (i > 9) {\n      i = 1;\n      s = s + \"\\n\";\n    }\n    s = s + \" \" + value;\n    i++;\n  }\n  return s;\n};\n\nconst print = (): string => Array.from(m.values()).join(\"\");\n\nconst row = (ind: number) =>\n  new Map(\n    Array.from(m.entries()).filter(\n      ([key, value]) => key.charAt(0) === ind.toString() && value\n    )\n  );\nconst col = (ind: number) =>\n  new Map(\n    Array.from(m.entries()).filter(\n      ([key, value]) => key.charAt(1) === ind.toString() && value\n    )\n  );\nconst block = (ind: number) =>\n  new Map(\n    Array.from(m.entries()).filter(\n      ([key, value]) => key.charAt(2) === ind.toString() && value\n    )\n  );\nconst empties = () =>\n  new Map(Array.from(m.entries()).filter(([, value]) => !value));\n\nconst get = (row: number, col: number): number | undefined => {\n  return m.get(createKey(row, col));\n};\nconst set = (row: number, col: number, value: number): void => {\n  m.set(createKey(row, col), value);\n};\n\nconst clear = () => {\n  m.clear();\n};\n\n\nconst api = {\n  create,\n  createEmpty,\n  print,\n  log,\n  clear,\n  row,\n  col,\n  block,\n  empties,\n  get,\n  set\n};\nexport default api;\n","import * as React from \"react\";\nimport { getBlock } from \"../utils/Board\";\n\nexport interface CellProps {\n  row: number;\n  col: number;\n  value: string;\n}\n\n\nexport interface ContentProps {\n  value: string,\n  bg: string\n}\n\nconst Content: React.FC<ContentProps> = ({ value, bg }) => {\n  return (\n    <div className={`flex justify-center items-center h-7 xl:h-14 rounded ${bg} ${value ? \"bg-opacity-70\" : \"bg-opacity-0\"\n      }`} >\n      <span className=\"font-semibold text-white xl:text-2xl text-shadow-lg font-board\">\n        {value && value.replace(\"0\", \".\")}\n      </span>\n    </div >\n  );\n}\n\n\nconst Cell: React.FC<CellProps> = ({ row, col, value }) => (\n  <div\n    key={row + col}\n    className={` w-7 h-7 xl:w-14 xl:h-14 mr-0.5 mb-0.5 border-dashed ${!value ? 'border' : ''} border-white border-opacity-50 rounded`}\n  >\n    <Content value={value} bg={getBlock(row, col) % 2 === 0 ? \"bg-yellow-500\" : \"bg-yellow-600\"} />\n  </div>\n);\n\nexport default Cell;\n","import * as React from \"react\";\nimport Cell from \"./Cell\";\n\nexport interface SudokuProps {\n  board: string;\n  isSolving: boolean\n}\n\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconst getValue = (row: number, col: number, board: string): string => {\n  if (row < 1 || row > 9 || col < 1 || col > 9) return \"\";\n  const startInd = (row - 1) * 9;\n  const slice = board.slice(startInd, startInd + 10);\n  return slice[col - 1];\n};\n\nconst Sudoku: React.FC<SudokuProps> = ({ board, isSolving }) => {\n  return (\n    <div\n      className=\"relative flex flex-wrap mx-auto w-sud-sm xl:w-sud-bg h-sud-sm xl:h-sud-bg\"\n    // style={{ width: \"522px\", height: \"522px\" }}\n    //style={{ width: \"270px\", height: \"270px\" }}\n    >\n      {arr.map((row) =>\n        arr.map((col) => (\n          <Cell\n            key={row + col}\n            row={row}\n            col={col}\n            value={getValue(row, col, board)}\n          />\n        ))\n      )}\n\n      <span className={`absolute inset-0 grid text-white bg-black ${isSolving ? \"opacity-75\" : \"opacity-0\"} transition-opacity ease-in-out duration-150 xl:text-3xl place-items-center`}>\n        Loading...\n        </span>\n\n\n    </div>\n  );\n};\n\nexport default Sudoku;\n","import React, { useState } from \"react\";\nimport Backtrack from \"../utils/Backtrack\";\nimport Board from \"../utils/Board\";\nimport Sudoku from \"./Sudoku\";\n\nconst HARD =\n  \"000004105070005903000923040809000500020050070051006000307200000000400200000560801\";\nconst MEDIUM =\n  \"071000382000001000300008006060102430040560010800000009000000620030014000100607940\";\nconst EASY =\n  \"390020780001000040500910306009002430600849017200030500467001050005006170000300000\";\nconst EMPTY =\n  \"000000000000000000000000000000000000000000000000000000000000000000000000000000000\";\n\nconst PRESET = [\n  [\"EMPTY\", EMPTY],\n  [\"EASY\", EASY],\n  [\"MEDIUM\", MEDIUM],\n  [\"HARD\", HARD],\n];\n\nconst VALID_CHARS = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\nconst App: React.FC = () => {\n  const [board, setBoard] = useState<string>(\"\");\n  const [isSolving, setIsSolving] = useState(false);\n  const charsLeft = 81 - board.length;\n  const boardReady = charsLeft === 0;\n\n  const onSolve = (board: string) => {\n    setIsSolving(true);\n    Board.create(board);\n\n    setTimeout(() => {\n      const res: BacktrackResult = Backtrack.solve(Board);\n      setIsSolving(false);\n      setBoard(res[1]);\n    }, 150);\n  };\n\n  const onPresetSelect = (e) => {\n    e.target?.dataset?.preset && setBoard(e.target.dataset.preset);\n  };\n\n  const onKeyDown = ({ key }) => {\n    console.log(key);\n    if (charsLeft === 0) {\n      return null;\n    }\n\n    if (key === \"Backspace\") {\n      setBoard(board.slice(0, board.length - 1));\n    }\n\n    VALID_CHARS.includes(key) && setBoard(board + key);\n  };\n\n  // TODO: check if board is valid, add click handling to buttons for mobile\n\n  return (\n    <div\n      tabIndex={0}\n      onKeyDown={onKeyDown}\n      className=\"min-h-screen py-2 antialiased min-w-min xl:py-6 xl:flex xl:flex-col xl:justify-center bg-gradient-to-b from-blue-400 to-blue-800 focus:outline-none\"\n    >\n      <div className=\"container mx-auto\">\n        <h1 className=\"p-5 text-center xl:mb-5 text-gray-50 \">\n          <span className=\"text-4xl tracking-tight uppercase xl:text-6xl text-shadow-md font-title\">\n            Sudoku-solver\n          </span>\n        </h1>\n        <div className=\"flex flex-col text-white xl:p-4 xl:mb-6\">\n          <h2 className=\"mb-3 tracking-wider text-center xl:text-2xl\">\n            Presets\n          </h2>\n          <ul\n            className=\"flex justify-center gap-4\"\n            onClick={(e) => onPresetSelect(e)}\n          >\n            {PRESET.map(([key, value]) => (\n              <li\n                key={key}\n                className=\"p-2 text-xs border rounded-md cursor-pointer xl:text-base border-gray-50 hover:shadow-xl\"\n                data-preset={value}\n              >\n                {key}\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"xl:mx-12\">\n          <div className=\"my-6 text-center xl:mr-6\">\n            <p\n              className=\"font-light leading-loose xl:text-xl text-gray-50 text-shadow xl:mb-6\"\n              onClick={(e) => {\n                const target: any = e.target;\n                target.nodeName === \"KBD\" &&\n                  onKeyDown({ key: target.innerText });\n              }}\n            >\n              <span className=\"hidden xl:block\">Type</span>{\" \"}\n              <span className=\"xl:hidden\">Click</span> <kbd>0</kbd> for empty,{\" \"}\n              <br className=\"xl:hidden\" /> <kbd>1</kbd>\n              <kbd>2</kbd>\n              <kbd>3</kbd>\n              <kbd>4</kbd>\n              <kbd>5</kbd>\n              <kbd>6</kbd>\n              <kbd>7</kbd>\n              <kbd>8</kbd>\n              <kbd>9</kbd> for values <br className=\"xl:hidden\" /> and{\" \"}\n              <kbd>Backspace</kbd> for delete\n            </p>\n            <div className=\"inline-block mt-4 ml-5 italic font-light leading-4 text-white\">\n              <span className=\"text-3xl font-normal\">{charsLeft}</span>{\" \"}\n              character left\n            </div>\n          </div>\n        </div>\n        <Sudoku board={board} isSolving={isSolving} />\n        <div className=\"flex justify-center mt-2 space-x-2 text-xs xl:text-base xl:mt-4 xl:space-x-4 xl:h-12\">\n          <button\n            hidden={!boardReady}\n            type=\"button\"\n            className=\"p-2 tracking-wider text-white bg-green-600 rounded-lg shadow-md xl:p-3 focus:ring-2 focus:ring-yellow-400 focus:outline-none focus:ring-offset-gray-600 focus:ring-offset-2\"\n            onClick={() => onSolve(board)}\n          >\n            Solve\n          </button>\n          <button\n            type=\"button\"\n            hidden={charsLeft === 81}\n            className=\"p-2 tracking-wider text-white bg-red-500 rounded-lg shadow-md xl:p-3 focus:ring-2 focus:ring-yellow-400 focus:outline-none focus:ring-offset-gray-600 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed\"\n            onClick={() => setBoard(\"\")}\n          >\n            Reset\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./tailwind.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}