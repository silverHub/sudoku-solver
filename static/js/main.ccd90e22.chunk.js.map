{"version":3,"sources":["utils/Backtrack.ts","utils/Board.ts","components/Instructions.tsx","components/Title.tsx","components/Presets.tsx","components/Board/Cell.tsx","components/Board/CellContent.tsx","components/Board/Sudoku.tsx","components/Controls.tsx","components/Board/Results.tsx","components/Board/Overlay.tsx","components/App.tsx","reportWebVitals.js","index.js"],"names":["isDistinct","map","Set","values","size","isValid","board","row","col","block","findNextValue","cell","key","value","ind","parseInt","getIndex","newValue","set","print","createResult","isSolutionFound","solution","error","statistics","noSolution","solutionFound","length","api","solve","executionStart","window","performance","now","emptyCells","empties","entries","nbrOfIteration","isFound","elapsedTime","err","console","log","m","Map","getBlock","i","j","createKey","createEmpty","create","str","Error","Array","from","keys","forEach","Number","charAt","join","s","clear","filter","toString","get","Instructions","onKeyDown","charsLeft","hidden","className","id","onClick","e","target","nodeName","innerText","Title","PRESET","Presets","onPresetSelect","selected","dataset","preset","data-preset","Cell","children","showBorder","CellContent","isVisible","bg","arr","getValue","startInd","slice","Sudoku","base","showResult","baseValue","replace","Controls","isSolving","onSolve","onReset","toggleShowResult","isVerified","hasResult","disabled","type","Results","result","JSON","stringify","toFixed","Overlay","show","VALID_CHARS","App","useState","setBoard","setIsSolving","selectedPreset","setSelectedPreset","setIsVerified","setResult","setShowResult","useEffect","includes","tabIndex","Board","setTimeout","res","Backtrack","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ccd90e22.chunk.js","sourcesContent":["export const isDistinct = (map: Map<string, number>): boolean => {\n  const s = new Set(map.values());\n  return s.size === map.size;\n};\n\nexport const getIndex = (\n  key: string\n): { row: number; col: number; block: number } => {\n  return {\n    row: parseInt(key[0], 10),\n    col: parseInt(key[1], 10),\n    block: parseInt(key[2], 10),\n  };\n};\n\nexport const isValid = (\n  { row, col, block }: { row: number; col: number; block: number },\n  board: Board\n) => {\n  return (\n    isDistinct(board.row(row)) &&\n    isDistinct(board.col(col)) &&\n    isDistinct(board.block(block))\n  );\n};\n\nexport const findNextValue = (\n  cell: [string, number],\n  board: Board\n): [boolean, number | null] => {\n  const [key, value] = cell;\n  const ind = getIndex(key);\n  let newValue = value;\n\n  do {\n    board.set(ind.row, ind.col, ++newValue);\n    board.print();\n  } while (newValue < 10 && !isValid(ind, board));\n\n  if (newValue === 10) {\n    board.set(ind.row, ind.col, 0);\n    return [false, null];\n  } else {\n    board.set(ind.row, ind.col, newValue);\n    return [true, newValue];\n  }\n};\n\nconst  createResult = (isSolutionFound:boolean,solution:string, error:any, statistics:any):BacktrackResult => {\n  return {\n    isSolutionFound,\n    solution,\n    error,\n    statistics\n  };\n}\n\n\nconst noSolution = (ind: number): boolean => ind < 0;\nconst solutionFound = (length: number, ind: number): boolean => ind === length;\n\n/**\n * \n * @param board A sudoku board, empty, complete or partially filled\n   The method uses backtrack algorithm to iterate through all the possible cell values (1-9). It returns with the first solution if there are multiple.\n   1. get the list of empty cells\n   2. get the next empty cell \n   3. find the next value for the cell and checks whether it is valid (check duplicates in row/col/block, <10)\n   - if yes ->  continue with next cell\n   - if no -> zero out cell and get back to previous cell\n   \n   Solution found if there is no empty cell left.\n   There is no solution if first empty cell value is 9 and it is not valid.\n   @returns [isSolutionFound: boolean, sudokuString:string]\n */\n\nconst solve = (board: Board): BacktrackResult => {\n  const executionStart = window.performance.now();\n\n  // get empty cells\n  const emptyCells: [string, number][] = [...board.empties().entries()];\n\n  let ind: number = 0;\n  let nbrOfIteration = 0;\n\n  try {\n    do {\n      nbrOfIteration++;\n\n      // get next cell\n      let cell: [string, number] = emptyCells[ind];\n\n      // get next value for cell\n      const [isFound, value] = findNextValue(cell, board);\n\n      /*\n      console.log(\n        \"ITER: \" + nbrOfIteration,\n        \"IND: \" + ind,\n        cell[0] + \"->\" + value\n      );\n      */\n\n      if (isFound) {\n        // update current cell\n        cell[1] = value || 0;\n        // goto next empty cell\n        ind++;\n      } else {\n        // zero current cell\n        cell[1] = 0;\n        // back to previous cell\n        ind--;\n      }\n    } while (!noSolution(ind) && !solutionFound(emptyCells.length, ind));\n\n    const executionEnd = window.performance.now();\n    const elapsedTime = executionEnd - executionStart;\n    const statistics = {\n      elapsedTime,\n      nbrOfIteration,\n    };\n\n    if (noSolution(ind)) {\n      return createResult(false,\"\",null,statistics);\n    }\n\n    if (solutionFound(emptyCells.length, ind)) {\n      return createResult(true, board.print(),null, statistics);\n    }\n\n    return createResult(false,\"\",null,statistics);\n  } catch (err) {\n    console.log(\"Error\", err);\n    return createResult(false, \"\", err, null);\n  }\n};\n\nconst api = {\n  solve,\n};\nexport default api;\n","// data structure will stored in a Map\n// keys: <row,col,block>    \"111\" to \"999\" (81 key)\n\nconst m: Map<string, number> = new Map();\n\nexport const getBlock = (i: number, j: number): number => {\n  if (j - 1 < 3) {\n    if (i - 1 < 3) return 1;\n    if (i - 1 < 6) return 4;\n    return 7;\n  } else if (j - 1 < 6) {\n    if (i - 1 < 3) return 2;\n    if (i - 1 < 6) return 5;\n    return 8;\n  } else {\n    if (i - 1 < 3) return 3;\n    if (i - 1 < 6) return 6;\n    return 9;\n  }\n};\n\nconst createKey = (row: number, col: number): string =>\n  `${row}${col}${getBlock(row, col)}`;\n\nconst createEmpty = (): void => {\n  for (let i = 1; i < 10; i++) {\n    for (let j = 1; j < 10; j++) {\n      m.set(createKey(i, j), 0);\n    }\n  }\n};\n\nconst create = (str: string): void => {\n  if (str.length !== 81) {\n    throw new Error(\"Invalid sudoku\");\n  }\n  createEmpty();\n\n  const keys = Array.from(m.keys());\n  keys.forEach((key, ind) => {\n    m.set(key, Number.parseInt(str.charAt(ind), 10));\n  });\n};\n\nconst log = () => {\n  let i = 1;\n  let s = \"\";\n  for (let value of m.values()) {\n    if (i > 9) {\n      i = 1;\n      s = s + \"\\n\";\n    }\n    s = s + \" \" + value;\n    i++;\n  }\n  return s;\n};\n\nconst print = (): string => Array.from(m.values()).join(\"\");\n\nconst row = (ind: number) =>\n  new Map(\n    Array.from(m.entries()).filter(\n      ([key, value]) => key.charAt(0) === ind.toString() && value\n    )\n  );\nconst col = (ind: number) =>\n  new Map(\n    Array.from(m.entries()).filter(\n      ([key, value]) => key.charAt(1) === ind.toString() && value\n    )\n  );\nconst block = (ind: number) =>\n  new Map(\n    Array.from(m.entries()).filter(\n      ([key, value]) => key.charAt(2) === ind.toString() && value\n    )\n  );\nconst empties = () =>\n  new Map(Array.from(m.entries()).filter(([, value]) => !value));\n\nconst get = (row: number, col: number): number | undefined => {\n  return m.get(createKey(row, col));\n};\nconst set = (row: number, col: number, value: number): void => {\n  m.set(createKey(row, col), value);\n};\n\nconst clear = () => {\n  m.clear();\n};\n\n\nconst api = {\n  create,\n  createEmpty,\n  print,\n  log,\n  clear,\n  row,\n  col,\n  block,\n  empties,\n  get,\n  set\n};\nexport default api;\n","import React from \"react\";\n\nexport interface InstructionsProps {\n  onKeyDown: (e: { key: string }) => void;\n  charsLeft: number;\n  hidden: boolean;\n}\n\nconst Instructions: React.FC<InstructionsProps> = ({\n  onKeyDown,\n  charsLeft,\n  hidden,\n}) => {\n  if (hidden) return null;\n  return (\n    <div className=\"md:mx-12\">\n      <div className=\"my-6 text-center md:mr-6\">\n        <p\n          className=\"font-light leading-loose select-none md:text-xl text-gray-50 text-shadow md:mb-6\"\n          id=\"instructions\"\n          onClick={(e) => {\n            const target: any = e.target;\n            target.nodeName === \"KBD\" && onKeyDown({ key: target.innerText });\n          }}\n        >\n          <span className=\"hidden md:inline\">Type</span>\n          <span className=\"md:hidden\">Click</span> <kbd>0</kbd> for empty,\n          <br className=\"md:hidden\" /> <kbd>1</kbd>\n          <kbd>2</kbd>\n          <kbd>3</kbd>\n          <kbd>4</kbd>\n          <kbd>5</kbd>\n          <kbd>6</kbd>\n          <kbd>7</kbd>\n          <kbd>8</kbd>\n          <kbd>9</kbd> for values <br className=\"md:hidden\" /> and{\" \"}\n          <kbd>Backspace</kbd> for delete\n        </p>\n        <div className=\"inline-block mt-4 ml-5 italic font-light leading-4 text-white\">\n          <span className=\"mr-1 text-3xl font-normal\">{charsLeft}</span>\n          character left\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Instructions;\n","import * as React from \"react\";\n\nconst Title: React.FC = () => {\n  return (\n    <h1 className=\"p-5 text-center md:mb-5 text-gray-50 \">\n      <span className=\"text-4xl tracking-tight uppercase md:text-6xl text-shadow-md font-title\">\n        Sudoku-solver\n      </span>\n    </h1>\n  );\n};\n\nexport default Title;\n","import React from \"react\";\n\nexport interface PresetsProps {\n  onPresetSelect: (preset: string) => void;\n  selected: string;\n}\n\nconst HARD =\n  \"000004105070005903000923040809000500020050070051006000307200000000400200000560801\";\nconst MEDIUM =\n  \"071000382000001000300008006060102430040560010800000009000000620030014000100607940\";\nconst EASY =\n  \"390020780001000040500910306009002430600849017200030500467001050005006170000300000\";\nconst EMPTY =\n  \"000000000000000000000000000000000000000000000000000000000000000000000000000000000\";\n\nconst PRESET = [\n  [\"EMPTY\", EMPTY],\n  [\"EASY\", EASY],\n  [\"MEDIUM\", MEDIUM],\n  [\"HARD\", HARD],\n];\n\nconst Presets: React.FC<PresetsProps> = ({ onPresetSelect, selected }) => {\n  return (\n    <div className=\"flex flex-col mb-2 text-white md:p-4 md:mb-6\">\n      <h2 className=\"mb-1 font-normal text-center md:mb-3 md:text-2xl\">\n        Presets\n      </h2>\n      <ul\n        className=\"flex justify-center gap-4\"\n        onClick={(e: any) => {\n          onPresetSelect(e.target?.dataset?.preset);\n        }}\n      >\n        {PRESET.map(([key, value]) => (\n          <li\n            key={key}\n            className={`p-2 text-xs font-semibold border rounded-md cursor-pointer md:text-base border-gray-50 hover:bg-white hover:text-blue-400 select-none ${\n              selected === value ? \"bg-white text-yellow-600\" : \"\"\n            }`}\n            data-preset={value}\n          >\n            {key}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Presets;\n","import * as React from \"react\";\n\nexport interface CellProps {\n  showBorder: boolean;\n}\n\nconst Cell: React.FC<CellProps> = ({ children, showBorder }) => (\n  <div\n    className={` w-7 h-7 md:w-14 md:h-14 mr-0.5 mb-0.5 border-dashed ${\n      showBorder ? \"border\" : \"\"\n    } border-white border-opacity-50 rounded`}\n  >\n    {children}\n  </div>\n);\n\nexport default Cell;\n","export interface CellContentProps {\n  isVisible: boolean;\n  bg: string;\n}\n\nconst CellContent: React.FC<CellContentProps> = ({\n  children,\n  isVisible,\n  bg,\n}) => {\n  return (\n    <div\n      className={`flex justify-center items-center h-7 md:h-14 rounded ${bg} ${\n        isVisible ? \"bg-opacity-70\" : \"bg-opacity-0\"\n      }`}\n    >\n      <span className=\"font-semibold text-white md:text-2xl text-shadow-lg font-board\">\n        {children}\n      </span>\n    </div>\n  );\n};\n\nexport default CellContent;\n","import * as React from \"react\";\nimport Cell from \"./Cell\";\nimport CellContent from \"./CellContent\";\nimport { getBlock } from \"../../utils/Board\";\n\nexport interface SudokuProps {\n  base: string;\n  solution: string;\n  showResult: boolean;\n}\n\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconst getValue = (row: number, col: number, board: string): string => {\n  if (row < 1 || row > 9 || col < 1 || col > 9) return \"\";\n  const startInd = (row - 1) * 9;\n  const slice = board.slice(startInd, startInd + 10);\n  return slice[col - 1];\n};\n\nconst Sudoku: React.FC<SudokuProps> = ({\n  base,\n  solution,\n  showResult,\n  children,\n}) => {\n  return (\n    <div className=\"relative flex flex-wrap mx-auto w-sud-sm md:w-sud-bg h-sud-sm md:h-sud-bg\">\n      {arr.map((row) =>\n        arr.map((col) => {\n          const baseValue: string = getValue(row, col, base);\n          const value: string =\n            showResult && baseValue === \"0\" && solution\n              ? getValue(row, col, solution)\n              : baseValue;\n\n          return (\n            <Cell key={row + col} showBorder={!value}>\n              <CellContent\n                isVisible={!!value}\n                bg={\n                  getBlock(row, col) % 2 === 0\n                    ? \"bg-yellow-500\"\n                    : \"bg-yellow-600\"\n                }\n              >\n                {value && value.replace(\"0\", \".\")}\n              </CellContent>\n            </Cell>\n          );\n        })\n      )}\n      {children}\n    </div>\n  );\n};\n\nexport default Sudoku;\n","export interface ControlsProps {\n  isSolving: boolean;\n  onSolve: () => void;\n  onReset: () => void;\n  toggleShowResult: () => void;\n  charsLeft: number;\n  isVerified: boolean | null;\n  hasResult: boolean;\n  showResult: boolean;\n}\n\nconst Controls: React.FC<ControlsProps> = ({\n  isSolving,\n  onSolve,\n  onReset,\n  toggleShowResult,\n  charsLeft,\n  isVerified,\n  hasResult,\n  showResult,\n}) => {\n  return (\n    <div className=\"flex justify-center mt-2 space-x-2 text-xs md:text-base md:mt-4 md:space-x-4 md:h-12\">\n      <button\n        disabled={isSolving || !isVerified}\n        hidden={hasResult}\n        type=\"button\"\n        className=\"p-2 tracking-wider text-white bg-green-600 rounded-lg shadow-md transform transition  hover:bg-green-500 hover:-translate-y-0.5 md:p-3 focus:ring-2 focus:ring-yellow-400 focus:outline-none focus:ring-offset-gray-600 focus:ring-offset-2 disabled:opacity-40 disabled:transform-none disabled:bg-green-600 disabled:cursor-default\"\n        onClick={onSolve}\n      >\n        Solve\n      </button>\n      <button\n        hidden={!hasResult}\n        type=\"button\"\n        className=\"p-2 tracking-wider text-white bg-green-600 rounded-lg shadow-md transform transition  hover:bg-green-500 hover:-translate-y-0.5 md:p-3 focus:ring-2 focus:ring-yellow-400 focus:outline-none focus:ring-offset-gray-600 focus:ring-offset-2 disabled:opacity-40 disabled:transform-none disabled:bg-green-600 disabled:cursor-default\"\n        onClick={toggleShowResult}\n      >\n        {showResult ? \"Show measurements\" : \"Show solution\"}\n      </button>\n      <button\n        type=\"button\"\n        disabled={isSolving || charsLeft === 81}\n        className=\"p-2 tracking-wider text-white bg-red-500 rounded-lg transform transition  hover:bg-red-400 hover:-translate-y-0.5 shadow-md md:p-3 focus:ring-2 focus:ring-yellow-400 focus:outline-none focus:ring-offset-gray-600 focus:ring-offset-2 disabled:opacity-40 disabled:transform-none disabled:bg-red-500 disabled:cursor-default\"\n        onClick={onReset}\n      >\n        Reset\n      </button>\n    </div>\n  );\n};\n\nexport default Controls;\n","export interface ResultsProps {\n  isVerified: boolean | null;\n  result: BacktrackResult | null;\n}\n\nconst Results: React.FC<ResultsProps> = ({ isVerified, result }) => {\n  const { isSolutionFound, error, statistics } = result || {};\n  const { elapsedTime = 0, nbrOfIteration } = statistics || {};\n\n  if (!result) {\n    return null;\n  }\n\n  return (\n    <div className=\"w-full h-full py-4 mx-auto text-center\">\n      <span className=\"text-3xl font-bold text-red-400 animate-pulse\">\n        {isVerified === false ? \"Invalid Sudoku\" : \"\"}\n      </span>\n\n      <div\n        hidden={!isVerified}\n        className=\"flex flex-col justify-center h-full mx-auto text-xs md:text-2xl text-gray-50\"\n      >\n        <h3 className=\"h-16 text-2xl font-semibold md:h-36 md:text-4xl\">\n          {isSolutionFound ? \"Solution found 😊\" : \"No solution 😢\"}\n        </h3>\n        <span hidden={!error}> Error happened: {JSON.stringify(error)}</span>\n        <span hidden={!elapsedTime}>\n          Elapsed time: {elapsedTime.toFixed(2)} msec\n        </span>\n        <span hidden={!nbrOfIteration}>Iterations: {nbrOfIteration}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Results;\n","import * as React from \"react\";\nexport interface OverlayProps {\n  show: boolean;\n}\n\nconst Overlay: React.FC<OverlayProps> = ({ show, children }) => {\n  return (\n    <span\n      className={`absolute inset-0 grid text-white bg-black ${\n        show ? \"opacity-75\" : \"opacity-0\"\n      } transition-opacity ease-in-out duration-150 md:text-3xl place-items-center`}\n    >\n      {children}\n    </span>\n  );\n};\n\nexport default Overlay;\n","import React, { useState, useEffect } from \"react\";\nimport Backtrack from \"../utils/Backtrack\";\nimport Board from \"../utils/Board\";\nimport Instructions from \"./Instructions\";\nimport Title from \"./Title\";\nimport Presets from \"./Presets\";\nimport Sudoku from \"./Board/Sudoku\";\nimport Controls from \"./Controls\";\nimport Results from \"./Board/Results\";\nimport Overlay from \"./Board/Overlay\";\n\nconst VALID_CHARS = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\n\nconst App: React.FC = () => {\n  const [board, setBoard] = useState<string>(\"\");\n  const [isSolving, setIsSolving] = useState<boolean>(false);\n  const [selectedPreset, setSelectedPreset] = useState<string>(\"\");\n  const [isVerified, setIsVerified] = useState<boolean | null>(null);\n  const [result, setResult] = useState<BacktrackResult | null>(null);\n  const [showResult, setShowResult] = useState<boolean>(false);\n  const charsLeft = 81 - board.length;\n\n  useEffect(() => {\n    // board validation\n    if (board.length === 81) {\n      setIsVerified(board.includes(\"0\"));\n    } else {\n      setIsVerified(false);\n    }\n  }, [board]);\n\n  const onPresetSelect = (preset: string): void => {\n    onReset();\n    setSelectedPreset(preset);\n    setBoard(preset);\n  };\n\n  const onSolve = (board: string): void => {\n    if (isVerified) {\n      setIsSolving(true);\n      Board.create(board);\n\n      setTimeout(() => {\n        const res: BacktrackResult = Backtrack.solve(Board);\n        setResult(res);\n        setIsSolving(false);\n      }, 150);\n    }\n  };\n\n  const onReset = () => {\n    setSelectedPreset(\"\");\n    setBoard(\"\");\n    setResult(null);\n    setShowResult(false);\n  };\n\n  const onKeyDown = ({ key }) => {\n    if (key === \"Backspace\" && board.length !== 0) {\n      setBoard(board.slice(0, board.length - 1));\n    }\n\n    if (charsLeft === 0 || !VALID_CHARS.includes(key)) {\n      return null;\n    }\n\n    setBoard(board + key);\n  };\n\n  return (\n    <div\n      tabIndex={0}\n      onKeyDown={onKeyDown}\n      className=\"min-h-screen py-2 antialiased font-light min-w-min md:py-6 md:flex md:flex-col md:justify-center bg-gradient-to-b from-blue-400 to-blue-800 focus:outline-none font-base\"\n    >\n      <div className=\"container mx-auto\">\n        <Title />\n        <Presets onPresetSelect={onPresetSelect} selected={selectedPreset} />\n        <Instructions\n          hidden={!!result}\n          onKeyDown={onKeyDown}\n          charsLeft={charsLeft}\n        />\n        <Sudoku\n          base={board}\n          solution={result?.solution || \"\"}\n          showResult={showResult}\n        >\n          <Overlay show={isSolving || (!!result && !showResult)}>\n            <>\n              {isSolving && \"Solving...\"}\n              <Results isVerified={isVerified} result={result} />\n            </>\n          </Overlay>\n        </Sudoku>\n\n        <Controls\n          isSolving={isSolving}\n          onSolve={() => onSolve(board)}\n          onReset={onReset}\n          toggleShowResult={() => setShowResult(!showResult)}\n          charsLeft={charsLeft}\n          isVerified={isVerified}\n          hasResult={!!result}\n          showResult={showResult}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./tailwind.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}